# Class to read a file and store its contents in a dictionary (hashmap equivalent in Python)
class FileReader:
    def __init__(self):
        # Initialize an empty dictionary to store key-value pairs
        self.map = {}

    def process_file(self, file_location):
        """
        Reads a file line by line, splits each line by commas, 
        and stores data in a dictionary.
        The first value in a line becomes the key, and the second value is added to a list.
        """
        try:
            with open(file_location, 'r') as file:  # Open the file in read mode
                for line in file:  # Read file line by line
                    line = line.strip()  # Remove any leading/trailing spaces or newline characters
                    if not line:  # Skip empty lines
                        continue
                    strs = line.split(",")  # Split the line by comma
                    key = strs[0].strip()  # First value is the key
                    value = strs[1].strip() if len(strs) > 1 else ""  # Second value is the data (if exists)

                    # Add value to the list for the key, initializing a list if key is new
                    self.map.setdefault(key, []).append(value)

        except FileNotFoundError:
            print(f"Error: The file '{file_location}' was not found.")
        except Exception as e:
            print(f"An error occurred while processing the file: {e}")

        return self.map  # Return the populated dictionary

    def get_ip_for_domain(self, domain):
        """
        Returns a single IP address for a given domain.
        If multiple IPs exist, it returns the first one.
        """
        return self.map.get(domain, [None])[0]  # Return first IP if exists, else None


# Class representing the main program flow
class Main:
    def __init__(self):
        # Initializing an empty dictionary to store processed data
        self.map = {}

    def run(self):
        """
        Function to simulate main execution.
        It reads the file and stores data in the map.
        """
        file_location = "domainname.txt"  # Placeholder for the file name
        file_reader = FileReader()  # Creating an instance of FileReader class
        self.map = file_reader.process_file(file_location)  # Processing file and storing data


# Class that represents a Load Balancer, which processes a file independently
class LoadBalancer:
    def __init__(self, file_location):
        """
        Constructor to initialize the LoadBalancer with a file location.
        """
        self.file_location = file_location  # Store the file location
        self.map = {}  # Initialize an empty dictionary

    def process(self):
        """
        Function to process the file using FileReader.
        """
        file_reader = FileReader()  # Creating an instance of FileReader class
        self.map = file_reader.process_file(self.file_location)  # Process file and store the data

